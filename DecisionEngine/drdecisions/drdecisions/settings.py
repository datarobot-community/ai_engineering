"""
Django settings for drdecisions project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from os import environ
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '85-bx@$%07yaqy2^8qs^ay07viz-e*7c1n^g())yjt+hni7(6o'



ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'datarobotapiwrapper',
    'baton',
    'baton.autodiscover',
    'django_extensions',
    'solo',    

]
""" 'admin_interface',
    'colorfield',
X_FRAME_OPTIONS='SAMEORIGIN' # only if django version >= 3.0 """

BASICAUTH_USERS = {'successengineering': '123456LpzN2DSV2123zkSgo9NWtqS123',
                   environ.get('BASIC_AUTH_USER'): environ.get('BASIC_AUTH_PASS')}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
SITE_ID = 1
ROOT_URLCONF = 'drdecisions.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, '../templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'drdecisions.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 60,
    }
}

SOLO_CACHE = 'default'
SOLO_CACHE_TIMEOUT = 60 * 5  # 5 mins
SOLO_CACHE_PREFIX = 'solo'

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

''' AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
] '''


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/



import socket

HOSTNAME = socket.gethostname()

# if hostname same as production url name use STATIC_ROOT 
if HOSTNAME == 'www.example.com':
    STATIC_ROOT = os.path.join(BASE_DIR, "/static/")
    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = False
else:
    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [
            #os.path.join(BASE_DIR, 'static/'),
            os.path.join(BASE_DIR,'./customstyles')
        ]

BATON = {
    'SITE_HEADER': 'DataRobot Decisions',
    'SITE_TITLE': 'DataRobot Decisions',
    'INDEX_TITLE': '',
    'SUPPORT_HREF': 'https://www.datarobot.com/',
    'COPYRIGHT': 'copyright Â© 2020 <a href="https://www.datarobot.com/">DataRobot</a>',  # noqa
    'POWERED_BY': 'Datarobot AI Engineering',
    'CONFIRM_UNSAVED_CHANGES': True,
    'MENU': (
        {'type': 'model', 'label': 'Prediction Server', 'name': 'predictionserver', 'app': 'datarobotapiwrapper'},
        {'type': 'model', 'label': 'Business Entity', 'name': 'businessentity', 'app': 'datarobotapiwrapper'},
        {'type': 'model', 'label': 'Logic Connector', 'name': 'logicconnector', 'app': 'datarobotapiwrapper'},
    ),
    # 'ANALYTICS': {
    #     'CREDENTIALS': os.path.join(BASE_DIR, 'credentials.json'),
    #     'VIEW_ID': '12345678',
    # }
}
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'root': {
        'level': 'WARNING',
        'handlers': ['console'],
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s '
                      '%(process)d %(thread)d %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        }
    },
    'loggers': {
        # The 'console' logs are captured by Zappa and output to CloudWatch.
        # Then those logs can be accessed either though CLoudWatch directly
        # or by using the 'zappa tail' command.
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.drdecisions': {
            'level': 'INFO',
         },
        'django.db.drdecisions': {
            'level': 'INFO',
            'handlers': ['console'],
            'propagate': False,
        },
        
    },
}
